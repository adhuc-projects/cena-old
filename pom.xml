<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.adhuc.cena</groupId>
  <artifactId>menu-generation</artifactId>
  <version>0.1.0</version>
  <packaging>jar</packaging>

  <name>menu-generation</name>
  <description>Defines all services needed to generate menus</description>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>1.5.7.RELEASE</version>
  </parent>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <java.version>1.8</java.version>
    <!-- Dependencies versions -->
    <spring-restdocs.version>1.2.2.RELEASE</spring-restdocs.version>
    <serenity.version>1.5.11</serenity.version>
    <serenity.cucumber.version>1.5.7</serenity.cucumber.version>
    <!-- Build execution -->
    <docker.build.skip>true</docker.build.skip>
    <test.unit.skip>false</test.unit.skip>
    <test.unit.jacoco.reportPath>${project.build.directory}/coverage-reports</test.unit.jacoco.reportPath>
    <test.unit.jacoco.reportFile>${test.unit.jacoco.reportPath}/jacoco.exec</test.unit.jacoco.reportFile>
    <test.acceptance.functional.skip>true</test.acceptance.functional.skip>
    <test.acceptance.dockerEnv.skip>true</test.acceptance.dockerEnv.skip>
    <test.acceptance.dockerEnv.directory>${project.basedir}/docker</test.acceptance.dockerEnv.directory>
    <test.acceptance.dockerEnv.pre.script>./pre.sh</test.acceptance.dockerEnv.pre.script>
    <test.acceptance.dockerEnv.pre.maxWaitTime>30</test.acceptance.dockerEnv.pre.maxWaitTime>
    <test.acceptance.dockerEnv.post.script>./post.sh</test.acceptance.dockerEnv.post.script>
    <test.acceptance.dockerEnv.cena.port>8080</test.acceptance.dockerEnv.cena.port>
    <documentation.snippets.directory>${project.build.directory}/generated-snippets</documentation.snippets.directory>
  </properties>

  <profiles>
    <!-- Docker build profile -->
    <profile>
      <id>docker</id>
      <properties>
        <docker.build.skip>false</docker.build.skip>
      </properties>
    </profile>
    <!-- Configuration for acceptance tests -->
    <profile>
      <id>functional-acceptance</id>
      <properties>
        <test.unit.skip>true</test.unit.skip>
        <test.acceptance.dockerEnv.skip>false</test.acceptance.dockerEnv.skip>
        <test.acceptance.functional.skip>false</test.acceptance.functional.skip>
      </properties>
    </profile>
    <profile>
      <id>functional-acceptance-windows</id>
      <activation>
        <os>
          <family>Windows</family>
        </os>
      </activation>
      <properties>
        <test.acceptance.dockerEnv.pre.script>pre.bat</test.acceptance.dockerEnv.pre.script>
        <test.acceptance.dockerEnv.post.script>post.bat</test.acceptance.dockerEnv.post.script>
      </properties>
    </profile>
  </profiles>

  <build>
    <finalName>${project.artifactId}</finalName>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
      </resource>
      <resource>
        <directory>${project.basedir}</directory>
        <includes>
          <include>Dockerfile</include>
        </includes>
        <targetPath>${project.build.directory}</targetPath>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
      <!-- Docker image build -->
      <plugin>
        <groupId>com.spotify</groupId>
        <artifactId>dockerfile-maven-plugin</artifactId>
        <version>1.3.2</version>
        <executions>
          <execution>
            <id>default</id>
            <goals>
              <goal>build</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <skip>${docker.build.skip}</skip>
          <repository>${project.build.finalName}</repository>
          <tag>latest</tag>
          <contextDirectory>${project.build.directory}</contextDirectory>
        </configuration>
      </plugin>
      <!-- Unit tests execution -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skipTests>${test.unit.skip}</skipTests>
          <runOrder>hourly</runOrder>
          <includes>
            <include>**/*Test.java</include>
            <include>**/*Documentation.java</include>
          </includes>
          <excludes>
            <exclude>**/*AcceptanceTest.java</exclude>
          </excludes>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.7.9</version>
        <executions>
          <execution>
            <id>jacoco-prepare-agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <phase>process-test-classes</phase>
            <configuration>
              <destFile>${test.unit.jacoco.reportFile}</destFile>
              <skip>${test.unit.skip}</skip>
            </configuration>
          </execution>
          <execution>
            <id>jacoco-report</id>
            <goals>
              <goal>report</goal>
            </goals>
            <phase>test</phase>
            <configuration>
              <dataFile>${test.unit.jacoco.reportFile}</dataFile>
              <outputDirectory>${test.unit.jacoco.reportPath}</outputDirectory>
              <skip>${test.unit.skip}</skip>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Documentation execution -->
      <plugin>
        <groupId>org.asciidoctor</groupId>
        <artifactId>asciidoctor-maven-plugin</artifactId>
        <version>1.5.2</version>
        <executions>
          <execution>
            <id>generate-docs</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>process-asciidoc</goal>
            </goals>
            <configuration>
              <backend>html</backend>
              <doctype>book</doctype>
              <sourceDirectory>${basedir}/src/docs</sourceDirectory>
              <attributes>
                <snippets>${documentation.snippets.directory}</snippets>
              </attributes>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <configuration>
          <encoding>${project.build.sourceEncoding}</encoding>
        </configuration>
        <executions>
          <execution>
            <id>copy-resources</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.outputDirectory}/static/docs/asciidoc</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}/generated-docs</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Acceptance tests execution -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>start-containers</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <phase>pre-integration-test</phase>
            <configuration>
              <skip>${test.acceptance.dockerEnv.skip}</skip>
              <workingDirectory>${test.acceptance.dockerEnv.directory}</workingDirectory>
              <executable>${test.acceptance.dockerEnv.pre.script}</executable>
              <commandlineArgs>${test.acceptance.dockerEnv.pre.maxWaitTime} ${test.acceptance.dockerEnv.cena.port}</commandlineArgs>
            </configuration>
          </execution>
          <execution>
            <id>stop-containers</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <phase>post-integration-test</phase>
            <configuration>
              <skip>${test.acceptance.dockerEnv.skip}</skip>
              <workingDirectory>${test.acceptance.dockerEnv.directory}</workingDirectory>
              <executable>${test.acceptance.dockerEnv.post.script}</executable>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <skipTests>${test.acceptance.functional.skip}</skipTests>
          <includes>
            <include>**/*AcceptanceTest.java</include>
          </includes>
          <argLine>-Dacceptance.rest.port=${test.acceptance.dockerEnv.cena.port}</argLine>
        </configuration>
        <executions>
          <execution>
            <id>verify</id>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Aggregate serenity acceptance tests reports -->
      <plugin>
        <groupId>net.serenity-bdd.maven.plugins</groupId>
        <artifactId>serenity-maven-plugin</artifactId>
        <version>${serenity.version}</version>
        <executions>
          <execution>
            <id>serenity-reports</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>aggregate</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-actuator-docs</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-hateoas</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.restdocs</groupId>
      <artifactId>spring-restdocs-mockmvc</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- Acceptance testing dependencies -->
    <dependency>
      <groupId>net.serenity-bdd</groupId>
      <artifactId>serenity-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>net.serenity-bdd</groupId>
      <artifactId>serenity-rest-assured</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>net.serenity-bdd</groupId>
      <artifactId>serenity-cucumber</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>net.serenity-bdd</groupId>
        <artifactId>serenity-core</artifactId>
        <version>${serenity.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>net.serenity-bdd</groupId>
        <artifactId>serenity-rest-assured</artifactId>
        <version>${serenity.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>net.serenity-bdd</groupId>
        <artifactId>serenity-cucumber</artifactId>
        <version>${serenity.cucumber.version}</version>
        <scope>test</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
</project>
